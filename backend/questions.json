[
  {
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order",
    "title": "Two Sum",
    "starting_code": "def twoSum(nums: List[int], target: int) -> List[int]:",
    "public_tests": ["assert twoSum([2,7,11,15], 9) == [1, 2]", "assert twoSum([3,2,4], 6) == [1, 2]"],
    "private_tests": ["assert twoSum([3,3], 6) == [1, 2]"]
  },
  {
    "description": "Given three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. You may return the values in any order.\n\nExample:\n\nInput: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]\nOutput: [3,2]\nExplanation: The values that are present in at least two arrays are:\n- 3, in all three arrays.\n- 2, in nums1 and nums2.",
    "title": "Two Out of Three",
    "starting_code": "def twoOutOfThree(nums1: List[int], nums2: List[int], nums3: List[int]) -> List[int]:",
    "public_tests": ["assert twoOutOfThree([1,1,3,2], [2,3], [3]) == [3,2]"],
    "private_tests": [
      "assert twoOutOfThree([3,1], [2,3], [1,2]) == [2,3,1]",
      "assert twoOutOfThree([1,2,2], [4,3,3], [5]) == []"
    ]
  },
  {
    "description": "A square triple (a,b,c) is a triple where a, b, and c are integers and a2 + b2 = c2.\n\nGiven an integer n, return the number of square triples such that 1 <= a, b, c <= n.\n\nExample:\n\nInput: n = 5\nOutput: 2\nExplanation: The square triples are (3,4,5) and (4,3,5).",
    "title": "Count Square Sum Triples",
    "starting_code": "def countTriples(n: int) -> int:",
    "public_tests": ["assert countTriples(5) == 2"],
    "private_tests": ["assert countTriples(10) == 4"]
  }
]
